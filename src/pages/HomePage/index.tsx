import {
  Badge,
  Box,
  Card,
  Divider,
  Grid,
  Group,
  Progress,
  RingProgress,
  SimpleGrid,
  Stack,
  Text,
  Title,
} from "@mantine/core";
import type { MRT_ColumnDef } from "mantine-react-table";
import {
  CartesianGrid,
  Legend,
  Line,
  LineChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
} from "recharts";
import Table from "../../components/Table";

const data = [
  { month: "1", income: 120000, expense: 90000 },
  { month: "2", income: 135000, expense: 100000 },
  { month: "3", income: 150000, expense: 110000 },
  { month: "4", income: 160000, expense: 115000 },
  { month: "5", income: 200000, expense: 130000 },
  { month: "6", income: 298483, expense: 180000 },
  { month: "7", income: 220000, expense: 150000 },
  { month: "8", income: 210000, expense: 140000 },
  { month: "9", income: 195000, expense: 130000 },
  { month: "10", income: 185000, expense: 125000 },
  { month: "11", income: 170000, expense: 120000 },
  { month: "12", income: 160000, expense: 115000 },
];
const summaryCards = [
  { label: "T·ªïng s·ªë c√¢y tr·ªìng", value: "1.200", color: "teal.7" },
  { label: "S·∫£n l∆∞·ª£ng h√¥m nay", value: "850 kg", color: "green.7" },
  { label: "TƒÉng tr∆∞·ªüng so v·ªõi h√¥m qua", value: "+16%", color: "blue.6" },
  { label: "B√°o c√°o m·ªõi h√¥m nay", value: "5", color: "grape.6" },
  { label: "Thu ho·∫°ch h√¥m nay", value: "630 kg", color: "lime.6" },
  { label: "S·∫£n l∆∞·ª£ng trung b√¨nh / c√¢y", value: "0.71 kg", color: "indigo.6" },
  { label: "S·ªë c√¢y ƒë√£ thu ho·∫°ch h√¥m nay", value: "890", color: "cyan.6" },
  { label: "T·ªâ l·ªá ho√†n th√†nh thu ho·∫°ch", value: "74%", color: "pink.6" },
];
type TaskItem = {
  title: string; // T√™n c√¥ng vi·ªác v√† khu v·ª±c
  status: string; // Tr·∫°ng th√°i hi·ªÉn th·ªã (v√≠ d·ª•: "ƒê√∫ng ti·∫øn ƒë·ªô", "Trong 1 ng√†y")
  assignee: string; // Ng∆∞·ªùi ph·ª• tr√°ch
  badges: string[]; // Danh s√°ch c√°c nh√£n tr·∫°ng th√°i b·ªï sung
  notes?: string; // Ghi ch√∫ b·ªï sung (t√πy ch·ªçn)
  color: "green" | "orange" | "red"; // M√†u tr·∫°ng th√°i cho ph·∫ßn n·ªÅn
};
const taskItems: TaskItem[] = [
  {
    title: "Phun thu·ªëc ƒë·ªãnh k·ª≥ - Khu l√∫a s·ªë 1",
    status: "ƒê√∫ng ti·∫øn ƒë·ªô",
    assignee: "Nguy·ªÖn VƒÉn A",
    badges: ["Chu·∫©n b·ªã thi·∫øt b·ªã", "ƒêang th·ª±c hi·ªán"],
    color: "green",
  },
  {
    title: "Thu ho·∫°ch th·ª≠ nghi·ªám - Khu chu·ªëi s·ªë 3",
    status: "Trong 1 ng√†y",
    assignee: "L√™ Th·ªã B",
    badges: ["∆Øu ti√™n th·∫•p"],
    color: "orange",
  },
  {
    title: "Ki·ªÉm tra ƒë·ªìng ng√¥ - Khu ng√¥ s·ªë 2",
    status: "Qu√° h·∫°n 2 ng√†y",
    assignee: "Tr·∫ßn VƒÉn C",
    badges: ["Ch∆∞a b·∫Øt ƒë·∫ßu", "∆Øu ti√™n cao"],
    notes: "C·∫ßn ki·ªÉm tra s√¢u b·ªánh k·ªπ h∆°n do m∆∞a l·ªõn",
    color: "red",
  },
];

const HomePage = () => {
  const columns: MRT_ColumnDef<TaskItem>[] = [
    {
      accessorKey: "title",
      header: "T√™n c√¥ng vi·ªác",
      Cell: ({ row }) => (
        <Stack gap={2}>
          <Text fw={600}>{row.original.title}</Text>
          {row.original.notes && (
            <Text size="xs" c="dimmed">
              üìù {row.original.notes}
            </Text>
          )}
        </Stack>
      ),
    },
    {
      accessorKey: "status",
      header: "Tr·∫°ng th√°i",
      Cell: ({ row }) => (
        <Badge color={row.original.color} variant="light">
          {row.original.status}
        </Badge>
      ),
    },
    {
      accessorKey: "assignee",
      header: "Ng∆∞·ªùi ph·ª• tr√°ch",
      Cell: ({ row }) => <Text>{row.original.assignee}</Text>,
    },
    {
      accessorKey: "badges",
      header: "Th√¥ng tin li√™n quan",
      Cell: ({ row }) => (
        <Group gap="xs">
          {row.original.badges.map((badge, i) => (
            <Badge key={i} size="xs" color="gray">
              {badge}
            </Badge>
          ))}
        </Group>
      ),
    },
  ];

  return (
    <Stack>
      {/* Cards Section */}
      <SimpleGrid cols={{ base: 1, sm: 2, md: 3 }} spacing="md">
        {/* Weather Card */}
        <Card
          withBorder
          shadow="lg"
          radius={4}
          style={{ background: "linear-gradient(145deg, #e3f2fd, #ffffff)" }}
        >
          <Stack gap="xs">
            <Text fw={700} size="sm" c="blue.7" tt="uppercase">
              Th√¥ng tin th·ªùi ti·∫øt
            </Text>
            <Title order={2} c="blue">
              +27¬∞C
            </Title>
            <Group justify="space-between">
              <Text size="xs" c="gray.6">
                Nhi·ªát ƒë·ªô ƒë·∫•t: +23¬∞C
              </Text>
              <Text size="xs" c="gray.6">
                ƒê·ªô ·∫©m: 78%
              </Text>
            </Group>
            <Group justify="space-between">
              <Text size="xs" c="gray.6">
                T·ªëc ƒë·ªô gi√≥: 12m/s
              </Text>
              <Text size="xs" c="gray.6">
                L∆∞·ª£ng m∆∞a: 10mm
              </Text>
            </Group>
            <Divider my={4} />
            <Group justify="space-between">
              <Text size="xs" c="gray.6">
                üåÖ M·∫∑t tr·ªùi m·ªçc: 5:22 SA
              </Text>
              <Text size="xs" c="gray.6">
                üåá M·∫∑t tr·ªùi l·∫∑n: 6:41 CH
              </Text>
            </Group>
          </Stack>
        </Card>

        {/* Soil Moisture */}
        <Card
          withBorder
          shadow="lg"
          radius={4}
          style={{ background: "linear-gradient(145deg, #e8f5e9, #ffffff)" }}
        >
          <Stack gap="xs">
            <Text fw={700} size="sm" c="green.7" tt="uppercase">
              T√¨nh tr·∫°ng ƒë·ªô ·∫©m ƒë·∫•t
            </Text>
            <Group justify="space-between">
              <Text size="xs">8 khu v·ª±c - M·ª©c th·∫•p</Text>
              <Progress
                value={30}
                color="red"
                radius={4}
                size="md"
                style={{ flex: 1 }}
              />
            </Group>
            <Group justify="space-between">
              <Text size="xs">36 khu v·ª±c - M·ª©c t·ªëi ∆∞u</Text>
              <Progress
                value={50}
                color="blue"
                radius={4}
                size="md"
                style={{ flex: 1 }}
              />
            </Group>
            <Group justify="space-between">
              <Text size="xs">18 khu v·ª±c - M·ª©c cao</Text>
              <Progress
                value={20}
                color="teal"
                radius={4}
                size="md"
                style={{ flex: 1 }}
              />
            </Group>
          </Stack>
        </Card>

        {/* Irrigation Status */}
        <Card
          withBorder
          shadow="lg"
          radius={4}
          style={{ background: "linear-gradient(145deg, #fffde7, #ffffff)" }}
        >
          <Stack gap="xs" align="center">
            <Text fw={700} size="sm" c="yellow.7" tt="uppercase">
              Hi·ªáu su·∫•t h·ªá th·ªëng t∆∞·ªõi ti√™u
            </Text>
            <RingProgress
              size={120}
              thickness={14}
              label={
                <Text ta="center" size="md" fw={600}>
                  85%
                </Text>
              }
              sections={[
                { value: 85, color: "green" },
                { value: 10, color: "yellow" },
                { value: 5, color: "red" },
              ]}
            />
            <Group gap={4} mt={4} justify="center">
              <Badge color="green">V·∫≠n h√†nh ·ªïn ƒë·ªãnh</Badge>
              <Badge color="yellow">C·∫ßn ki·ªÉm tra</Badge>
              <Badge color="red">Ph√°t hi·ªán l·ªói</Badge>
            </Group>
          </Stack>
        </Card>
      </SimpleGrid>

      {/* Summary Cards */}
      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} spacing="md" mt="md">
        {summaryCards.map((item, i) => (
          <Card
            key={i}
            withBorder
            shadow="lg"
            radius={4}
            p="xl"
            style={{
              background: "linear-gradient(135deg, #f8f9fa, #ffffff)",
              transition: "transform 0.2s ease, box-shadow 0.2s ease",
              borderLeft: `6px solid var(--mantine-color-${item.color})`,
              position: "relative",
              overflow: "hidden",
              boxShadow: "0 4px 20px rgba(0, 0, 0, 0.05)",
              cursor: "pointer",
            }}
            onMouseEnter={(e) =>
              (e.currentTarget.style.transform = "scale(1.03)")
            }
            onMouseLeave={(e) => (e.currentTarget.style.transform = "scale(1)")}
          >
            <Stack gap="xs">
              <Group justify="space-between" align="flex-start">
                <Text
                  size="xs"
                  fw={700}
                  c="gray.7"
                  tt="uppercase"
                  style={{ letterSpacing: 1 }}
                >
                  {item.label}
                </Text>
                <Badge
                  variant="outline"
                  color={item.color.split(".")[0]}
                  size="xs"
                >
                  C·∫≠p nh·∫≠t
                </Badge>
              </Group>
              <Title order={2} c={item.color} lh={1.1} ff="sans-serif">
                {item.value}
              </Title>
              <Text size="xs" c="gray.6">
                {item.label.includes("c√¢y")
                  ? "T·ªïng d·ªØ li·ªáu theo v√πng tr·ªìng"
                  : "So s√°nh v·ªõi c√πng k·ª≥ h√¥m qua"}
              </Text>
            </Stack>
            <Box
              pos="absolute"
              top={-15}
              right={-15}
              style={{
                opacity: 0.08,
                fontSize: 120,
                fontWeight: 900,
                color: `var(--mantine-color-${item.color})`,
              }}
            >
              ‚¨§
            </Box>
          </Card>
        ))}
      </SimpleGrid>
      <Divider my="md" label="B√°o c√°o t·ªïng h·ª£p" labelPosition="left" />

      {/* Chart and Map */}
      <Grid gutter="md">
        <Grid.Col span={{ base: 12, md: 8 }}>
          <Card withBorder shadow="lg" radius={4}>
            <Stack>
              <Title order={4} c="blue.7">
                Bi·ªÉu ƒë·ªì t·ªïng h·ª£p
              </Title>
              <Box h={300}>
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart
                    data={data.map((item) => ({
                      ...item,
                      profit: item.income - item.expense,
                      expenseRate: (item.expense / item.income) * 100,
                      stockProposal: item.income * 0.05, // gi·∫£ ƒë·ªãnh: 5% s·∫£n l∆∞·ª£ng c·∫ßn tr·ªØ kho
                      loss: item.expense * 0.08, // gi·∫£ ƒë·ªãnh: 8% chi ph√≠ l√† hao h·ª•t
                    }))}
                    margin={{ top: 20, right: 40, left: 10, bottom: 20 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" stroke="#dee2e6" />
                    <XAxis
                      dataKey="month"
                      stroke="#495057"
                      tick={{ fontSize: 12, fill: "#495057" }}
                    />
                    <Tooltip
                      formatter={(value, name) => [
                        value.toLocaleString(),
                        name === "expenseRate"
                          ? "% Chi ph√≠/Doanh thu"
                          : name === "stockProposal"
                          ? "ƒê·ªÅ xu·∫•t l∆∞u kho"
                          : name === "loss"
                          ? "T·ªïn th·∫•t ∆∞·ªõc t√≠nh"
                          : name,
                      ]}
                      labelFormatter={(label) => `Th√°ng: ${label}`}
                      contentStyle={{
                        backgroundColor: "#fff",
                        border: "1px solid #ccc",
                        borderRadius: 10,
                        fontSize: 13,
                      }}
                      labelStyle={{ fontWeight: 600 }}
                    />
                    <Legend wrapperStyle={{ fontSize: 13 }} />
                    <Line
                      type="monotone"
                      dataKey="income"
                      name="Doanh thu"
                      stroke="#228be6"
                      strokeWidth={3}
                      dot={{
                        r: 4,
                        stroke: "#228be6",
                        fill: "#fff",
                        strokeWidth: 2,
                      }}
                      activeDot={{ r: 6, fill: "#228be6" }}
                    />
                    <Line
                      type="monotone"
                      dataKey="expense"
                      name="Chi ph√≠"
                      stroke="#f59f00"
                      strokeWidth={3}
                      dot={{
                        r: 4,
                        stroke: "#f59f00",
                        fill: "#fff",
                        strokeWidth: 2,
                      }}
                      activeDot={{ r: 6, fill: "#f59f00" }}
                    />
                    <Line
                      type="monotone"
                      dataKey="profit"
                      name="L·ª£i nhu·∫≠n"
                      stroke="#40c057"
                      strokeDasharray="5 5"
                      strokeWidth={2}
                      dot={{
                        r: 3,
                        stroke: "#40c057",
                        fill: "#fff",
                        strokeWidth: 1,
                      }}
                      activeDot={{ r: 5, fill: "#40c057" }}
                    />
                    <Line
                      type="monotone"
                      dataKey="stockProposal"
                      name="ƒê·ªÅ xu·∫•t l∆∞u kho"
                      stroke="#845ef7"
                      strokeWidth={2}
                      dot={{
                        r: 3,
                        stroke: "#845ef7",
                        fill: "#fff",
                        strokeWidth: 1,
                      }}
                    />
                    <Line
                      type="monotone"
                      dataKey="loss"
                      name="T·ªïn th·∫•t ∆∞·ªõc t√≠nh"
                      stroke="#e03131"
                      strokeDasharray="4 2"
                      strokeWidth={2}
                      dot={{
                        r: 2,
                        stroke: "#e03131",
                        fill: "#fff",
                        strokeWidth: 1,
                      }}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </Box>
            </Stack>
          </Card>
        </Grid.Col>

        <Grid.Col span={{ base: 12, md: 4 }}>
          <Card withBorder shadow="lg" radius={4}>
            <Title order={5} c="gray.7" mb="xs">
              Khu v·ª±c tr·ªìng tr·ªçt
            </Title>
            <Box h={310} style={{ borderRadius: 4, overflow: "hidden" }}>
              <iframe
                title="B·∫£n ƒë·ªì m·∫≠t ƒë·ªô Vi·ªát Nam"
                width="100%"
                height="100%"
                frameBorder="0"
                style={{ border: 0 }}
                src="https://www.openstreetmap.org/export/embed.html?bbox=102.0%2C8.0%2C110.0%2C23.5&layer=hot&marker=16.0%2C107.5"
                allowFullScreen
              ></iframe>
            </Box>
          </Card>
        </Grid.Col>
      </Grid>
      <Divider
        my="md"
        label="Qu·∫£n l√Ω c√¥ng vi·ªác n√¥ng tr·∫°i"
        labelPosition="left"
      />

      {/* Task Management */}
      <Table columns={columns} data={taskItems} />
    </Stack>
  );
};

export default HomePage;
